# This file is automatically generated from cmake.toml - DO NOT EDIT
# See https://github.com/build-cpp/cmkr for more information

cmake_minimum_required(VERSION 3.15)

if(CMAKE_SOURCE_DIR STREQUAL CMAKE_BINARY_DIR)
	message(FATAL_ERROR "In-tree builds are not supported. Run CMake from a separate directory: cmake -B build")
endif()

# Regenerate CMakeLists.txt automatically in the root project
set(CMKR_ROOT_PROJECT OFF)
if(CMAKE_CURRENT_SOURCE_DIR STREQUAL CMAKE_SOURCE_DIR)
	set(CMKR_ROOT_PROJECT ON)

	# Bootstrap cmkr
	include(cmkr.cmake OPTIONAL RESULT_VARIABLE CMKR_INCLUDE_RESULT)
	if(CMKR_INCLUDE_RESULT)
		cmkr()
	endif()

	# Enable folder support
	set_property(GLOBAL PROPERTY USE_FOLDERS ON)
endif()

# Create a configure-time dependency on cmake.toml to improve IDE support
if(CMKR_ROOT_PROJECT)
	configure_file(cmake.toml cmake.toml COPYONLY)
endif()

set(CMAKE_EXPORT_COMPILE_COMMANDS ON)
if (WIN32)
    # UTF8 Codepage
    add_compile_options("$<$<C_COMPILER_ID:MSVC>:/utf-8>")

    # GUI APPLICATION /SUBSYSTEM:WINDOWS
    set(CMAKE_WIN32_EXECUTABLE ON)
endif()

project(lite
	VERSION
		1.11
)

include("cmake/CPM.cmake")
include("cmake/lua.cmake")
include("cmake/sdl2.cmake")

# Target lite
set(CMKR_TARGET lite)
set(lite_SOURCES "")

list(APPEND lite_SOURCES
	"src/api/api.c"
	"src/api/renderer.c"
	"src/api/renderer_font.c"
	"src/api/system.c"
	"src/lib/stb/stb_truetype.c"
	"src/main.c"
	"src/rencache.c"
	"src/renderer.c"
	res.rc
)

list(APPEND lite_SOURCES
	cmake.toml
)

set(CMKR_SOURCES ${lite_SOURCES})
add_executable(lite)

if(lite_SOURCES)
	target_sources(lite PRIVATE ${lite_SOURCES})
endif()

get_directory_property(CMKR_VS_STARTUP_PROJECT DIRECTORY ${PROJECT_SOURCE_DIR} DEFINITION VS_STARTUP_PROJECT)
if(NOT CMKR_VS_STARTUP_PROJECT)
	set_property(DIRECTORY ${PROJECT_SOURCE_DIR} PROPERTY VS_STARTUP_PROJECT lite)
endif()

source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${lite_SOURCES})

target_include_directories(lite PRIVATE
	src
)


link_sdl2(${CMKR_TARGET})
link_lua(${CMKR_TARGET})

if (NOT WIN32)
    target_link_libraries(${CMKR_TARGET} PRIVATE m)
endif()
add_custom_command(TARGET ${CMKR_TARGET} POST_BUILD
    COMMAND ${CMAKE_COMMAND} -E copy_directory
        ${CMAKE_SOURCE_DIR}/data $<TARGET_FILE_DIR:${CMKR_TARGET}>/data)

unset(CMKR_TARGET)
unset(CMKR_SOURCES)

install(
	TARGETS
		lite
	DESTINATION
		"${CMAKE_INSTALL_PREFIX}/bin"
	COMPONENT
		lite
)
